import pytest

from gym_chess.envs.game.ChessGame import *

chess = ChessGame()


@pytest.mark.parametrize(
    ('board', 'king', 'expected_moves'), [
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, 0, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, W, B, B, 0],  # 4
             [0, 0, 0, 0, W, WK, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, WN, 0],  # 6
             [0, 0, 0, 0, 0, 0, 0, 0],  # 7
         ],
         [5, 5],
         [[5, 5, 4, 5], [5, 5, 4, 6], [5, 5, 6, 5], [5, 5, 6, 4]]),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [7, 4],
         [[7, 4, 7, 3], [7, 4, 7, 5], [7, 4, 6, 3], [7, 4, 6, 4], [7, 4, 6, 5], [0], [1]]),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [0, 4],
         [[0, 4, 0, 3], [0, 4, 0, 5], [0, 4, 1, 3], [0, 4, 1, 4], [0, 4, 1, 5], [0], [1]]),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, WR, 0],  # 3
             [0, 0, 0, 0, 0, 0, BR, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [7, 4],
         [[7, 4, 7, 3], [7, 4, 7, 5], [7, 4, 6, 3], [7, 4, 6, 4], [7, 4, 6, 5], [1]]),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, WR, 0],  # 3
             [0, 0, 0, 0, 0, 0, BR, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [0, 4],
         [[0, 4, 0, 3], [0, 4, 0, 5], [0, 4, 1, 3], [0, 4, 1, 4], [0, 4, 1, 5], [1]]),


        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, BN, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, WN, 0, WR],  # 7
         ],
         [7, 4],
         [[7, 4, 7, 3], [7, 4, 6, 3], [7, 4, 6, 4], [7, 4, 6, 5], [1]]),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, BN, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, WN, 0, WR],  # 7
         ],
         [0, 4],
         [[0, 4, 0, 3], [0, 4, 1, 3], [0, 4, 1, 4], [0, 4, 1, 5], [1]]),


        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, BR, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [7, 4],
         [[7, 4, 7, 3], [7, 4, 7, 5], [7, 4, 6, 3], [7, 4, 6, 4], [7, 4, 6, 5], [0]]),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, WR, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [0, 4],
         [[0, 4, 0, 3], [0, 4, 0, 5], [0, 4, 1, 3], [0, 4, 1, 4], [0, 4, 1, 5], [0]]),
    ]
)
def test_king_moves(board, king, expected_moves):
    chess.board = board
    if chess.board[king[0]][king[1]] in BLACK_RANGE:
        chess.current_color = BLACK
    else:
        chess.current_color = WHITE
    for move in chess.get_king_moves(king[0], king[1]):
        assert move in expected_moves
    assert len(expected_moves) \
           == len(chess.get_king_moves(king[0], king[1]))


@pytest.mark.parametrize(
    ('board', 'pawn', 'expected_moves', 'history'), [
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [B, 0, 0, B, B, 0, 0, B],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [W, 0, 0, W, W, 0, 0, W],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [6, 0],
         [[6, 0, 5, 0], [6, 0, 4, 0]],
         []),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [B, 0, 0, B, B, 0, 0, B],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [W, 0, 0, W, W, 0, 0, W],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [6, 7],
         [[6, 7, 5, 7], [6, 7, 4, 7]],
         []),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [B, 0, 0, B, B, 0, 0, B],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [W, 0, 0, W, W, 0, 0, W],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [1, 0],
         [[1, 0, 2, 0], [1, 0, 3, 0]],
         []),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [B, 0, 0, B, B, 0, 0, B],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [W, 0, 0, W, W, 0, 0, W],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [1, 7],
         [[1, 7, 2, 7], [1, 7, 3, 7]],
         []),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, B, 0, B, 0, 0],  # 3
             [0, 0, 0, 0, W, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [4, 4],
         [[4, 4, 3, 4], [4, 4, 3, 3], [4, 4, 3, 5]],
         []),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, B, 0, 0, 0, 0],  # 3
             [0, 0, W, W, W, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [3, 3],
         [[3, 3, 4, 2], [3, 3, 4, 4]],
         []),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [3, 1],
         [[3, 1, 2, 1], [3, 1, 2, 0, 1]],
         [[1, 0, 3, 0]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [3, 1],
         [[3, 1, 2, 1], [3, 1, 2, 2, 1]],
         [[1, 2, 3, 2]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [3, 3],
         [[3, 3, 2, 3], [3, 3, 2, 2, 1]],
         [[1, 2, 3, 2]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [3, 6],
         [[3, 6, 2, 6], [3, 6, 2, 7, 1]],
         [[1, 7, 3, 7]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [4, 0],
         [[4, 0, 5, 0], [4, 0, 5, 1, -1]],
         [[6, 1, 4, 1]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [4, 2],
         [[4, 2, 5, 2], [4, 2, 5, 1, -1]],
         [[6, 1, 4, 1]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [4, 6],
         [[4, 6, 5, 6], [4, 6, 5, 7, -1]],
         [[6, 7, 4, 7]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, BB, 0, B, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [4, 7],
         [],
         []),
    ]
)
def test_pawn_moves(board, pawn, expected_moves, history):
    chess.history = history
    chess.board = board
    if chess.board[pawn[0]][pawn[1]] in BLACK_RANGE:
        chess.current_color = BLACK
    else:
        chess.current_color = WHITE
    for move in chess.get_pawn_moves(pawn[0], pawn[1]):
        assert move in expected_moves
    assert len(expected_moves) == len(chess.get_pawn_moves(pawn[0], pawn[1]))


@pytest.mark.parametrize(
    ('board', 'knight', 'expected_moves'), [
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, B, 0, B, 0, 0, 0],  # 5
             [0, 0, 0, W, W, 0, 0, 0],  # 6
             [0, 0, 0, WN, WK, 0, 0, 0],  # 7
         ],
         [7, 3],
         [[7, 3, 5, 2], [7, 3, 5, 4], [7, 3, 6, 1], [7, 3, 6, 5]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, BN, BK, 0, 0, 0],  # 0
             [0, W, 0, B, B, 0, 0, 0],  # 1
             [0, 0, W, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [0, 3],
         [[0, 3, 1, 1], [0, 3, 2, 2], [0, 3, 2, 4], [0, 3, 1, 5]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, B, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, B, 0],  # 3
             [0, 0, 0, 0, WN, 0, 0, 0],  # 4
             [0, 0, W, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, W, 0, W, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [4, 4],
         [[4, 4, 2, 3], [4, 4, 2, 5], [4, 4, 3, 6], [4, 4, 5, 6], [4, 4, 3, 2]]),
    ]
)
def test_knight_moves(board, knight, expected_moves):
    chess.board = board
    if chess.board[knight[0]][knight[1]] in BLACK_RANGE:
        chess.current_color = BLACK
    else:
        chess.current_color = WHITE
    for move in chess.get_knight_moves(knight[0], knight[1]):
        assert move in expected_moves
    assert len(expected_moves) == len(chess.get_knight_moves(knight[0], knight[1]))


@pytest.mark.parametrize(
    ('board', 'queen', 'expected_moves'), [
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, BQ, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, W, 0],  # 4
             [0, 0, 0, B, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, WQ, WK, 0, 0, 0],  # 7
         ],
         [7, 3],
         [[7, 3, 6, 2], [7, 3, 5, 1], [7, 3, 4, 0], [7, 3, 6, 4], [7, 3, 5, 5], [7, 3, 6, 3], [7, 3, 5, 3],
          [7, 3, 7, 2], [7, 3, 7, 1], [7, 3, 7, 0]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, BQ, BK, 0, 0, 0],  # 0
             [0, 0, W, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, W, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, B, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, WQ, WK, 0, 0, 0],  # 7
         ],
         [0, 3],
         [[0, 3, 1, 4], [0, 3, 2, 5], [0, 3, 1, 3], [0, 3, 2, 3], [0, 3, 3, 3], [0, 3, 4, 3], [0, 3, 1, 2],
          [0, 3, 0, 2], [0, 3, 0, 1], [0, 3, 0, 0]]),
    ]
)
def test_queen_moves(board, queen, expected_moves):
    chess.board = board
    if chess.board[queen[0]][queen[1]] in BLACK_RANGE:
        chess.current_color = BLACK
    else:
        chess.current_color = WHITE
    for move in chess.get_queen_moves(queen[0], queen[1]):
        assert move in expected_moves
    assert len(expected_moves) == len(chess.get_queen_moves(queen[0], queen[1]))


@pytest.mark.parametrize(
    ('board', 'bishop', 'expected_moves'), [
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, B, 0, 0],  # 4
             [W, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, WB, 0, WK, 0, 0, 0],  # 7
         ],
         [7, 2],
         [[7, 2, 6, 1], [7, 2, 6, 3], [7, 2, 5, 4], [7, 2, 4, 5]]),
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, BB, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, W, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [0, 2],
         [[0, 2, 1, 1], [0, 2, 2, 0], [0, 2, 1, 3], [0, 2, 2, 4]]),
    ]
)
def test_bishop_moves(board, bishop, expected_moves):
    chess.board = board
    if chess.board[bishop[0]][bishop[1]] in BLACK_RANGE:
        chess.current_color = BLACK
    else:
        chess.current_color = WHITE
    for move in chess.get_bishop_moves(bishop[0], bishop[1]):
        assert move in expected_moves
    assert len(expected_moves) == len(chess.get_bishop_moves(bishop[0], bishop[1]))


@pytest.mark.parametrize(
    ('board', 'rook', 'expected_moves'), [
        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [W, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [7, 0],
         [[7, 0, 6, 0], [7, 0, 5, 0], [7, 0, 4, 0], [7, 0, 7, 1], [7, 0, 7, 2], [7, 0, 7, 3]]),
        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [W, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [0, 0],
         [[0, 0, 1, 0], [0, 0, 2, 0], [0, 0, 0, 1], [0, 0, 0, 2], [0, 0, 0, 3]]),
    ]
)
def test_rook_moves(board, rook, expected_moves):
    chess.board = board
    if chess.board[rook[0]][rook[1]] in BLACK_RANGE:
        chess.current_color = BLACK
    else:
        chess.current_color = WHITE
    for move in chess.get_rook_moves(rook[0], rook[1]):
        assert move in expected_moves
    assert len(expected_moves) == len(chess.get_rook_moves(rook[0], rook[1]))


@pytest.mark.parametrize(
    ('board', 'color', 'short', 'check'), [
        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [W, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, 0, 0, 0, 0, 0, B],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         BLACK,
         True, False),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [W, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, 0, 0, 0, 0, 0, B],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         WHITE,
         True, False),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [W, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, 0, 0, 0, WQ, BQ, B],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         BLACK,
         True, True),

        ([  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [W, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, 0, 0, 0, WQ, BQ, B],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         WHITE,
         True, True),

    ]
)
def test_castling_check(board, color, short, check):
    chess.board = board
    chess.current_color = color
    move = [0] if short else [1]
    assert chess.castling_check(short) == check

@pytest.mark.parametrize(
    ('move', 'board', 'expected_board', 'history', 'color'), [
        ([3, 1, 2, 0, 1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [W, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [[1, 0, 3, 0]], []),

        ([3, 1, 2, 2, 1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, W, 0, 0, 0, 0, 0],  # 2
             [B, 0, 0, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [[1, 2, 3, 2]], []),

        ([3, 4, 2, 5, 1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, W, 0, 0],  # 2
             [B, W, B, W, 0, 0, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [[1, 5, 3, 5]], []),

        ([3, 6, 2, 5, 1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, W, 0, 0],  # 2
             [B, W, B, W, W, 0, 0, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [[1, 5, 3, 5]], []),

        ([3, 6, 2, 7, 1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [B, W, B, W, W, B, W, B],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, W],  # 2
             [B, W, B, W, W, B, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [[1, 7, 3, 7]], []),

        ([4, 0, 5, 1, -1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, B, 0, 0, 0, B, W],  # 4
             [0, B, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
        [[6, 1, 4, 1]], []),

        ([4, 2, 5, 1, -1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, 0, 0, 0, 0, B, W],  # 4
             [0, B, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
        [[6, 1, 4, 1]], []),

        ([4, 6, 5, 7, -1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, B, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, 0, 0, B],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
        [[6, 7, 4, 7]], []),

        ([1, 1, 0, 1, 5],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, W, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, WQ, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
        [], []),

        ([1, 1, 0, 1, 4],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, W, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, WR, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
        [], []),

        ([1, 1, 0, 1, 3],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, W, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, WB, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
        [], []),

        ([1, 1, 0, 1, 2],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, W, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, WN, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, 0, B, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, WK, 0, 0, 0],  # 7
         ],
        [], []),

        ([6, 2, 7, 3, 5],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, B, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, WN, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, BQ, WK, 0, 0, 0],  # 7
         ],
        [], []),

        ([6, 2, 7, 3, 4],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, B, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, WN, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, BR, WK, 0, 0, 0],  # 7
         ],
        [], []),

        ([6, 2, 7, 3, 3],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, B, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, WN, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, BB, WK, 0, 0, 0],  # 7
         ],
        [], []),

        ([6, 2, 7, 3, 2],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, B, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, WN, WK, 0, 0, 0],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, BN, WK, 0, 0, 0],  # 7
         ],
        [], []),

        ([0],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, 0, WR, WK, 0],  # 7
         ],
        [], WHITE),

        ([1],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BK, 0, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, WK, WR, 0, 0, 0, WR],  # 7
         ],
        [], WHITE),

        ([0],
         [  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, 0, BR, BK, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
        [], BLACK),

        ([1],
         [  # 0  1  2  3  4  5  6  7
             [BR, 0, 0, 0, BK, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
         [  # 0  1  2  3  4  5  6  7
             [0, 0, BK, BR, 0, 0, 0, BR],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [B, W, 0, 0, 0, 0, B, W],  # 4
             [0, 0, 0, 0, 0, 0, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [WR, 0, 0, 0, WK, 0, 0, WR],  # 7
         ],
        [], BLACK),

    ]
)
def test_make_move(move, board, expected_board, history, color):
    chess.board = board
    chess.history = history
    if len(move) > 1:
        if chess.board[move[0]][move[1]] in BLACK_RANGE:
            chess.current_color = BLACK
        else:
            chess.current_color = WHITE
    else:
        chess.current_color = color
    assert move in chess.get_available_moves()
    chess.make_move(move)
    assert chess.board == expected_board


@pytest.mark.parametrize(
    ('board', 'result'), [
        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, BB, BK, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, WK, WB, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, 0, 0, 0, 0],  # 7
         ],
         False),

        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, 0, BK, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, BB, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, WK, WB, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, 0, 0, 0, 0],  # 7
         ],
         True),

        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, 0, BK, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, BB, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, WK, 0, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, 0, 0, 0, 0],  # 7
         ],
         True),

        ([  # 0  1  2  3  4  5  6  7
             [0, 0, 0, 0, 0, BK, 0, 0],  # 0
             [0, 0, 0, 0, 0, 0, 0, 0],  # 1
             [0, 0, 0, 0, 0, 0, 0, 0],  # 2
             [0, 0, 0, 0, 0, 0, 0, 0],  # 3
             [0, 0, 0, 0, 0, 0, 0, 0],  # 4
             [0, 0, 0, 0, 0, WK, WB, 0],  # 5
             [0, 0, 0, 0, 0, 0, 0, 0],  # 6
             [0, 0, 0, 0, 0, 0, 0, 0],  # 7
         ],
         True),

    ]
)
def test_impossible_mate(board, result):
    chess.board = board
    assert chess.impossible_mate() == result


@pytest.mark.parametrize(
    ('history', 'result'), [
        ([[0, 0, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 0],
          [0, 0, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 0],],
         True),

        ([[0, 2, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 0],
          [0, 0, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 0],],
         False),

        ([],
         False),

        ([[0, 0, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 0],
          [0, 0, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0],],
         False),

        ([[7, 4, 7, 5], [0, 0, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 0],
          [0, 0, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 0],],
         True),
    ]
)
def test_three_times(history, result):
    chess.history = history
    assert chess.rule_three_times() == result