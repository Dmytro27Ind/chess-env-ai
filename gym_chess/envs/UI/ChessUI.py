# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ChessUI_4.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys

from gym_chess.envs.game.ChessGame import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtProperty, pyqtSlot, QTimer
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QTableWidget

ENABLE_BUTTOM_STYLE = "background-color: rgb(28, 20, 39);\nfont: 15pt \"MingLiU_HKSCS-ExtB\";\ncolor: rgb(244, 244, " \
                      "244);\nborder-radius: 15 "

DISABLE_BUTTON_STYLE = "background-color: rgb(108, 108, 108);\nfont: 15pt \"MingLiU_HKSCS-ExtB\";\ncolor: rgb(244, 244, " \
                       "244);\nborder-radius: 15 "


class CustomWidget(QWidget):
    def __init__(self, img, parent=None):
        QWidget.__init__(self, parent)

        self._img = img

        self.setLayout(QVBoxLayout())
        self.lbPixmap = QLabel(self)

        self.layout().addWidget(self.lbPixmap)

        self.initUi()

    def initUi(self):
        pix = QPixmap(self._img)
        if pix is not None:
            self.lbPixmap.setPixmap(pix.scaled(60, 60))

    @pyqtProperty(str)
    def img(self):
        return self._img

    @img.setter
    def total(self, value):
        if self._img == value:
            return
        self._img = value
        self.initUi()


class TableWidget(QTableWidget):
    def __init__(self, parent=None):
        QTableWidget.__init__(self, parent)

        self.resizeColumnsToContents()
        self.resizeRowsToContents()
        self.cellClicked.connect(self.onCellClicked)

        self.move = []

    @pyqtSlot(int, int)
    def onCellClicked(self, row, column):
        w = self.cellWidget(row, column)
        # print([row, column])
        self.move.append([row, column])
        # print("m: " + str(self.move))


class Ui_MainWindow(object):
    def __init__(self):
        self.pause = False
        self.result = False
        self.speed = 1
        self.next = False
        self.auto = True

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 900)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("gym_chess/envs/assets/pieces/b_king.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: rgb(64, 57, 74);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.button_pause = QtWidgets.QPushButton(self.centralwidget)
        self.button_pause.setGeometry(QtCore.QRect(10, 810, 60, 60))
        self.button_pause.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                        "border-radius: 15;")
        self.button_pause.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("gym_chess/envs/assets/icons/pause.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap("gym_chess/envs/assets/icons/play.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.button_pause.setIcon(icon1)
        self.button_pause.setIconSize(QtCore.QSize(45, 45))
        self.button_pause.setCheckable(True)
        self.button_pause.setObjectName("button_pause")
        self.button_1x = QtWidgets.QPushButton(self.centralwidget)
        self.button_1x.setGeometry(QtCore.QRect(310, 809, 61, 61))
        self.button_1x.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                     "font: 15pt \"MingLiU_HKSCS-ExtB\";\n"
                                     "color: rgb(244, 244, 244);\n"
                                     "border-radius: 15")
        self.button_1x.setObjectName("button_1x")
        # ///////////////////////////////////////////////
        self.table_board = TableWidget(self.centralwidget)
        #  //////////////////////////////////////////////
        self.table_board.setGeometry(QtCore.QRect(0, 110, 600, 600))
        self.table_board.setStyleSheet("border-color: rgb(204, 255, 189);")
        self.table_board.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.table_board.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.table_board.setShowGrid(True)
        self.table_board.setCornerButtonEnabled(True)
        self.table_board.setRowCount(8)
        self.table_board.setColumnCount(8)
        self.table_board.setObjectName("table_board")
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setForeground(brush)
        self.table_board.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_board.setItem(1, 0, item)
        self.table_board.horizontalHeader().setVisible(False)
        self.table_board.horizontalHeader().setDefaultSectionSize(75)
        self.table_board.horizontalHeader().setHighlightSections(True)
        self.table_board.horizontalHeader().setMinimumSectionSize(75)
        self.table_board.verticalHeader().setVisible(False)
        self.table_board.verticalHeader().setDefaultSectionSize(75)
        self.table_board.verticalHeader().setHighlightSections(True)
        self.table_board.verticalHeader().setMinimumSectionSize(75)
        self.button_9x = QtWidgets.QPushButton(self.centralwidget)
        self.button_9x.setGeometry(QtCore.QRect(450, 810, 61, 61))
        self.button_9x.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                     "font: 15pt \"MingLiU_HKSCS-ExtB\";\n"
                                     "color: rgb(244, 244, 244);\n"
                                     "border-radius: 15")
        self.button_9x.setObjectName("button_9x")
        self.button_05x = QtWidgets.QPushButton(self.centralwidget)
        self.button_05x.setGeometry(QtCore.QRect(240, 809, 61, 61))
        self.button_05x.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                      "font: 15pt \"MingLiU_HKSCS-ExtB\";\n"
                                      "color: rgb(244, 244, 244);\n"
                                      "border-radius: 15")
        self.button_05x.setObjectName("button_05x")
        self.button_result = QtWidgets.QPushButton(self.centralwidget)
        self.button_result.setGeometry(QtCore.QRect(80, 810, 141, 60))
        self.button_result.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                         "font: 15pt \"MingLiU_HKSCS-ExtB\";\n"
                                         "color: rgb(244, 244, 244);\n"
                                         "border-radius: 15")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("gym_chess/envs/assets/icons/check-bold.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button_result.setIcon(icon2)
        self.button_result.setIconSize(QtCore.QSize(40, 40))
        self.button_result.setObjectName("button_result")
        self.button_episode = QtWidgets.QPushButton(self.centralwidget)
        self.button_episode.setGeometry(QtCore.QRect(520, 730, 60, 60))
        self.button_episode.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                          "font: 15pt \"MingLiU_HKSCS-ExtB\";\n"
                                          "color: rgb(244, 244, 244);\n"
                                          "border-radius: 15")
        self.button_episode.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("gym_chess/envs/assets/icons/auto.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon3.addPixmap(QtGui.QPixmap("gym_chess/envs/assets/icons/not-auto.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.button_episode.setIcon(icon3)
        self.button_episode.setIconSize(QtCore.QSize(40, 40))
        self.button_episode.setCheckable(True)
        self.button_episode.setObjectName("button_episode")
        self.button_3x = QtWidgets.QPushButton(self.centralwidget)
        self.button_3x.setGeometry(QtCore.QRect(380, 810, 61, 61))
        self.button_3x.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                     "font: 15pt \"MingLiU_HKSCS-ExtB\";\n"
                                     "color: rgb(244, 244, 244);\n"
                                     "border-radius: 15")
        self.button_3x.setObjectName("button_3x")
        self.button_next = QtWidgets.QPushButton(self.centralwidget)
        self.button_next.setGeometry(QtCore.QRect(520, 20, 60, 60))
        self.button_next.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                       "border-radius: 15;")
        self.button_next.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("gym_chess/envs/assets/icons/skip-next.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button_next.setIcon(icon4)
        self.button_next.setIconSize(QtCore.QSize(45, 45))
        self.button_next.setCheckable(True)
        self.button_next.setObjectName("button_next")
        self.button_max = QtWidgets.QPushButton(self.centralwidget)
        self.button_max.setGeometry(QtCore.QRect(520, 810, 61, 61))
        self.button_max.setStyleSheet("background-color: rgb(28, 20, 39);\n"
                                      "font: 15pt \"MingLiU_HKSCS-ExtB\";\n"
                                      "color: rgb(244, 244, 244);\n"
                                      "border-radius: 15")
        self.button_max.setObjectName("button_9x_2")
        self.label_black_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_1.setGeometry(QtCore.QRect(10, 750, 30, 30))
        self.label_black_1.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_1.setText("")
        self.label_black_1.setObjectName("label_black_1")
        self.label_black_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_2.setGeometry(QtCore.QRect(40, 750, 30, 30))
        self.label_black_2.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_2.setText("")
        self.label_black_2.setObjectName("label_black_2")
        self.label_black_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_3.setGeometry(QtCore.QRect(70, 750, 30, 30))
        self.label_black_3.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_3.setText("")
        self.label_black_3.setObjectName("label_black_3")
        self.label_black_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_4.setGeometry(QtCore.QRect(100, 750, 30, 30))
        self.label_black_4.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_4.setText("")
        self.label_black_4.setObjectName("label_black_4")
        self.label_black_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_5.setGeometry(QtCore.QRect(130, 750, 30, 30))
        self.label_black_5.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_5.setText("")
        self.label_black_5.setObjectName("label_black_5")
        self.label_black_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_6.setGeometry(QtCore.QRect(160, 750, 30, 30))
        self.label_black_6.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_6.setText("")
        self.label_black_6.setObjectName("label_black_6")
        self.label_black_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_7.setGeometry(QtCore.QRect(190, 750, 30, 30))
        self.label_black_7.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_7.setText("")
        self.label_black_7.setObjectName("label_black_7")
        self.label_black_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_8.setGeometry(QtCore.QRect(220, 750, 30, 30))
        self.label_black_8.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_8.setText("")
        self.label_black_8.setObjectName("label_black_8")
        self.label_black_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_9.setGeometry(QtCore.QRect(250, 750, 30, 30))
        self.label_black_9.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_9.setText("")
        self.label_black_9.setObjectName("label_black_9")
        self.label_black_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_10.setGeometry(QtCore.QRect(280, 750, 30, 30))
        self.label_black_10.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_10.setText("")
        self.label_black_10.setObjectName("label_black_10")
        self.label_black_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_11.setGeometry(QtCore.QRect(310, 750, 30, 30))
        self.label_black_11.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_11.setText("")
        self.label_black_11.setObjectName("label_black_11")
        self.label_black_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_12.setGeometry(QtCore.QRect(340, 750, 30, 30))
        self.label_black_12.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_12.setText("")
        self.label_black_12.setObjectName("label_black_12")
        self.label_black_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_13.setGeometry(QtCore.QRect(370, 750, 30, 30))
        self.label_black_13.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_13.setText("")
        self.label_black_13.setObjectName("label_black_13")
        self.label_black_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_14.setGeometry(QtCore.QRect(400, 750, 30, 30))
        self.label_black_14.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_14.setText("")
        self.label_black_14.setObjectName("label_black_14")
        self.label_black_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_black_15.setGeometry(QtCore.QRect(430, 750, 30, 30))
        self.label_black_15.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_black_15.setText("")
        self.label_black_15.setObjectName("label_black_15")
        self.label_white_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_1.setGeometry(QtCore.QRect(10, 40, 30, 30))
        self.label_white_1.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_1.setText("")
        self.label_white_1.setObjectName("label_white_1")
        self.label_white_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_2.setGeometry(QtCore.QRect(40, 40, 30, 30))
        self.label_white_2.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_2.setText("")
        self.label_white_2.setObjectName("label_white_2")
        self.label_white_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_3.setGeometry(QtCore.QRect(70, 40, 30, 30))
        self.label_white_3.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_3.setText("")
        self.label_white_3.setObjectName("label_white_3")
        self.label_white_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_4.setGeometry(QtCore.QRect(100, 40, 30, 30))
        self.label_white_4.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_4.setText("")
        self.label_white_4.setObjectName("label_white_4")
        self.label_white_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_5.setGeometry(QtCore.QRect(130, 40, 30, 30))
        self.label_white_5.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_5.setText("")
        self.label_white_5.setObjectName("label_white_5")
        self.label_white_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_6.setGeometry(QtCore.QRect(160, 40, 30, 30))
        self.label_white_6.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_6.setText("")
        self.label_white_6.setObjectName("label_white_6")
        self.label_white_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_7.setGeometry(QtCore.QRect(190, 40, 30, 30))
        self.label_white_7.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_7.setText("")
        self.label_white_7.setObjectName("label_white_7")
        self.label_white_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_8.setGeometry(QtCore.QRect(220, 40, 30, 30))
        self.label_white_8.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_8.setText("")
        self.label_white_8.setObjectName("label_white_8")
        self.label_white_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_9.setGeometry(QtCore.QRect(250, 40, 30, 30))
        self.label_white_9.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_9.setText("")
        self.label_white_9.setObjectName("label_white_9")
        self.label_white_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_10.setGeometry(QtCore.QRect(280, 40, 30, 30))
        self.label_white_10.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_10.setText("")
        self.label_white_10.setObjectName("label_white_10")
        self.label_white_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_11.setGeometry(QtCore.QRect(310, 40, 30, 30))
        self.label_white_11.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_11.setText("")
        self.label_white_11.setObjectName("label_white_11")
        self.label_white_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_12.setGeometry(QtCore.QRect(340, 40, 30, 30))
        self.label_white_12.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_12.setText("")
        self.label_white_12.setObjectName("label_white_12")
        self.label_white_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_13.setGeometry(QtCore.QRect(370, 40, 30, 30))
        self.label_white_13.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_13.setText("")
        self.label_white_13.setObjectName("label_white_13")
        self.label_white_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_14.setGeometry(QtCore.QRect(400, 40, 30, 30))
        self.label_white_14.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_14.setText("")
        self.label_white_14.setObjectName("label_white_14")
        self.label_white_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_white_15.setGeometry(QtCore.QRect(430, 40, 30, 30))
        self.label_white_15.setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
        self.label_white_15.setText("")
        self.label_white_15.setObjectName("label_white_15")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # _______________________________________________________________________

        self.label_black_result = QtWidgets.QLabel(self.centralwidget)
        self.label_black_result.setGeometry(QtCore.QRect(460, 30, 55, 45))
        self.label_black_result.setStyleSheet(ENABLE_BUTTOM_STYLE)
        self.label_black_result.setText("  0")
        self.label_black_result.setObjectName("label_white_16")
        self.label_black_result.setVisible(False)

        self.label_white_result = QtWidgets.QLabel(self.centralwidget)
        self.label_white_result.setGeometry(QtCore.QRect(460, 740, 55, 45))
        self.label_white_result.setStyleSheet(ENABLE_BUTTOM_STYLE)
        self.label_white_result.setText("  0")
        self.label_white_result.setObjectName("label_black_15")
        self.label_black_result.setVisible(False)

        self.black_takes_labels = [self.label_white_1, self.label_white_2, self.label_white_3, self.label_white_4,
                                   self.label_white_5, self.label_white_6, self.label_white_7, self.label_white_8,
                                   self.label_white_9, self.label_white_10, self.label_white_11, self.label_white_12,
                                   self.label_white_13, self.label_white_14, self.label_white_15]

        self.white_takes_labels = [self.label_black_1, self.label_black_2, self.label_black_3, self.label_black_4,
                                   self.label_black_5, self.label_black_6, self.label_black_7, self.label_black_8,
                                   self.label_black_9, self.label_black_10, self.label_black_11, self.label_black_12,
                                   self.label_black_13, self.label_black_14, self.label_black_15]

        white_sq = QtGui.QColor(220, 246, 212)
        black_sq = QtGui.QColor(102, 162, 126)

        for i in range(8):
            for j in range(8):
                self.table_board.setItem(i, j, QtWidgets.QTableWidgetItem())
                temp = [1, 3, 5, 7] if i in [0, 2, 4, 6] else [0, 2, 4, 6]
                if j in temp:
                    self.table_board.item(i, j).setBackground(black_sq)
                else:
                    self.table_board.item(i, j).setBackground(white_sq)

    def button_pause_clicked(self):
        self.pause = True if not self.pause else False
        if self.pause:
            self.button_result.setEnabled(False)
            self.button_next.setEnabled(False)
            self.button_result.setStyleSheet(DISABLE_BUTTON_STYLE)
            self.button_next.setStyleSheet(DISABLE_BUTTON_STYLE)
        else:
            self.button_result.setEnabled(True)
            self.button_next.setEnabled(True)
            self.button_result.setStyleSheet(ENABLE_BUTTOM_STYLE)
            self.button_next.setStyleSheet(ENABLE_BUTTOM_STYLE)

    def button_result_clicked(self):
        self.result = True
        self.button_result.setEnabled(False)
        self.button_result.setStyleSheet(DISABLE_BUTTON_STYLE)
        self.button_pause.setEnabled(False)
        self.button_pause.setStyleSheet(DISABLE_BUTTON_STYLE)

    def button_speed_clicked(self, speed):
        self.speed = speed

    def button_next_clicked(self):
        self.next = True
        self.button_result.setEnabled(True)
        self.button_result.setStyleSheet(ENABLE_BUTTOM_STYLE)
        self.button_pause.setEnabled(True)
        self.button_pause.setStyleSheet(ENABLE_BUTTOM_STYLE)

    def button_episode_clicked(self):
        self.auto = True if not self.auto else False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Chess Env"))
        self.button_1x.setText(_translate("MainWindow", "1x"))
        __sortingEnabled = self.table_board.isSortingEnabled()
        self.table_board.setSortingEnabled(False)
        self.table_board.setSortingEnabled(__sortingEnabled)
        self.button_9x.setText(_translate("MainWindow", "9x"))
        self.button_05x.setText(_translate("MainWindow", "0.5x"))
        self.button_result.setText(_translate("MainWindow", "result"))
        self.button_3x.setText(_translate("MainWindow", "3x"))
        self.button_max.setText(_translate("MainWindow", "max"))

        # _________________________________________________________________________________________________
        self.button_pause.clicked.connect(self.button_pause_clicked)
        self.button_result.clicked.connect(self.button_result_clicked)
        self.button_05x.clicked.connect(lambda: self.button_speed_clicked(0.5))
        self.button_1x.clicked.connect(lambda: self.button_speed_clicked(1))
        self.button_3x.clicked.connect(lambda: self.button_speed_clicked(3))
        self.button_9x.clicked.connect(lambda: self.button_speed_clicked(9))
        self.button_max.clicked.connect(lambda: self.button_speed_clicked(-1))
        self.button_episode.clicked.connect(self.button_episode_clicked)
        self.button_next.clicked.connect(self.button_next_clicked)


PERIOD = 250


def make_chess_ui(conn):
    ChessUI(conn).execute()


class ChessUI:
    def __init__(self, conn):
        self.conn = conn

        self.app = QtWidgets.QApplication(sys.argv)
        self.MainWindow = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.MainWindow)
        self.__timer = QTimer()
        self.__timer.timeout.connect(self.show)
        self.__timer.start(PERIOD)
        self.last_speed = self.ui.speed
        self.MainWindow.show()

        self.count = 0
        self.boards = []
        self.status_in_boards = False
        self.board = None
        self.end = False
        self.close = False

        self.__timer_board = QTimer()
        self.__timer_board.timeout.connect(self.get_board)
        self.__timer_board.start()

    def execute(self):
        self.app.exec_()

    def exit(self):
        """
        Táto metóda ukončí proces vykresľovania.
        """
        sys.exit()

    def reset(self):
        """Táto metóda resetuje vykresľovanie medzi epizódami."""
        self.count = 0
        self.board = None
        self.ui.result = False
        self.ui.pause = False
        self.ui.next = False
        self.end = False

        for i in range(15):
            self.ui.white_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")
            self.ui.black_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")

    def check_speed_button(self):
        """Táto metóda mení rýchlosť vykresľovania v závislosti od toho, ktoré tlačidlo je stlačené."""
        if self.last_speed != self.ui.speed:
            self.last_speed = self.ui.speed
            self.__timer.stop()
            if self.last_speed == -1:
                self.__timer.start(1)
            else:
                self.__timer.start(int(PERIOD / self.last_speed))

    def check_next_button(self):
        """Táto metóda kontroluje, či je stlačené tlačidlo ďalšej epizódy."""
        if self.ui.next:
            self.reset()
            self.check_status_in_boards()
            recv = None
            while True:
                if self.status_in_boards:
                    recv = self.boards.pop(0)
                else:
                    recv = self.conn.recv()

                if recv['status'] == DRAW or recv['status'] == WHITE_WIN or recv['status'] == BLACK_WIN:
                    break

    def check_result_button(self):
        """Táto metóda kontroluje, či je stlačené tlačidlo výsledku"""
        if self.ui.result:
            self.check_status_in_boards()
            recv = None

            while True:
                self.board = recv
                if self.status_in_boards:
                    recv = self.boards.pop(0)
                else:
                    recv = self.conn.recv()

                if recv['status'] == DRAW or recv['status'] == WHITE_WIN or recv['status'] == BLACK_WIN:
                    break

            self.boards.insert(0, recv)
            self.end = True

    def check_status_in_boards(self):
        """Táto metóda kontroluje aktuálny stav na šachovnici."""
        if not self.boards:
            return
        for board in self.boards:
            if board['status'] == DRAW or board['status'] == WHITE_WIN or board['status'] == BLACK_WIN:
                self.status_in_boards = True
                return
        self.status_in_boards = False

    def get_board(self):
        """Táto metóda získa šachovnicu s ďalšou pozíciou z procesu prostredia cez potrubie."""
        if self.conn.poll():
            self.boards.append(self.conn.recv())

    def __is_white_ceil(self, i, j) -> bool:
            temp = [1, 3, 5, 7] if i in [0, 2, 4, 6] else [0, 2, 4, 6]
            if j in temp:
                return False
            else:
                return True

    def show(self):
        """Táto metóda je zodpovedná za vykresľovanie v GUI. Čím vyššia je rýchlosť, tým častejšie sa volá."""
        if self.close:
            self.exit()

        self.check_next_button()

        if self.end:
            return

        self.check_speed_button()
        self.check_result_button()

        if self.ui.pause:
            return

        if self.boards:
            self.board = self.boards.pop(0)
            if self.board == -1:
                self.close = True
                self.__timer_board.stop()
                return
        else:
            return

        for i in range(8):
            for j in range(8):
                lb = None
                if self.board['board'][i][j] == B_PAWN:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/b_pawn.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/b_pawn_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == B_KNIGHT:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/b_knight.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/b_knight_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == B_BISHOP:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/b_bishop.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/b_bishop_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == B_ROOK:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/b_rook.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/b_rook_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == B_QUEEN:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/b_queen.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/b_queen_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == B_KING:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/b_king.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/b_king_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)

                elif self.board['board'][i][j] == W_PAWN:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/w_pawn.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/w_pawn_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == W_KNIGHT:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/w_knight.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/w_knight_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == W_BISHOP:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/w_bishop.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/w_bishop_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == W_ROOK:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/w_rook.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/w_rook_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == W_QUEEN:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/w_queen.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/w_queen_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)
                elif self.board['board'][i][j] == W_KING:
                    lb = CustomWidget("gym_chess/envs/assets/pieces/w_king.jpg") if self.__is_white_ceil(i, j) else \
                        CustomWidget("gym_chess/envs/assets/pieces/w_king_b.jpg")
                    self.ui.table_board.setCellWidget(i, j, lb)

                elif self.board['board'][i][j] == EMPTY:
                    # lb = CustomWidget("")
                    self.ui.table_board.setCellWidget(i, j, None)

                if lb is not None:
                    temp = [1, 3, 5, 7] if i in [0, 2, 4, 6] else [0, 2, 4, 6]
                    if j in temp:
                        lb.setStyleSheet("background-color: rgb(102, 162, 126);")
                    else:
                        lb.setStyleSheet("background-color: rgb(220, 246, 212);")

        for i in range(len(self.board['white_takes'])):
            if self.board['white_takes'][i] == B_PAWN:
                self.ui.white_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/b_pawn_k.jpg);")
            elif self.board['white_takes'][i] == B_KNIGHT:
                self.ui.white_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/b_knight_k.jpg);")
            elif self.board['white_takes'][i] == B_BISHOP:
                self.ui.white_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/b_bishop_k.jpg);")
            elif self.board['white_takes'][i] == B_ROOK:
                self.ui.white_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/b_rook_k.jpg);")
            elif self.board['white_takes'][i] == B_QUEEN:
                self.ui.white_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/b_queen_k.jpg);")
            elif self.board['white_takes'][i] == B_KING:
                self.ui.white_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/b_king_k.jpg);")
            elif self.board['white_takes'][i] == EMPTY:
                self.ui.white_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")

        for i in range(len(self.board['black_takes'])):
            if self.board['black_takes'][i] == W_PAWN:
                self.ui.black_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/w_pawn_k.jpg);")
            elif self.board['black_takes'][i] == W_KNIGHT:
                self.ui.black_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/w_knight_k.jpg);")
            elif self.board['black_takes'][i] == W_BISHOP:
                self.ui.black_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/w_bishop_k.jpg);")
            elif self.board['black_takes'][i] == W_ROOK:
                self.ui.black_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/w_rook_k.jpg);")
            elif self.board['black_takes'][i] == W_QUEEN:
                self.ui.black_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/w_queen_k.jpg);")
            elif self.board['black_takes'][i] == W_KING:
                self.ui.black_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/w_king_k.jpg);")
            elif self.board['black_takes'][i] == EMPTY:
                self.ui.black_takes_labels[i].setStyleSheet("image: url(gym_chess/envs/assets/pieces/background.jpg);")

        if self.board['white_score'] > 0:
            self.ui.label_white_result.setText(" +" + str(self.board['white_score']))
            self.ui.label_black_result.setVisible(False)
            self.ui.label_white_result.setVisible(True)
        elif self.board['white_score'] < 0:
            self.ui.label_black_result.setText(" +" + str(abs(self.board['white_score'])))
            self.ui.label_black_result.setVisible(True)
            self.ui.label_white_result.setVisible(False)
        else:
            self.ui.label_black_result.setVisible(False)
            self.ui.label_white_result.setVisible(False)

        if self.board is not None:
            if self.board['status'] == DRAW or self.board['status'] == WHITE_WIN or self.board['status'] == BLACK_WIN:
                self.boards.insert(0, self.board)
                self.ui.button_result.click()
                if self.ui.auto:
                    self.ui.button_next.click()
                return

        self.count += 1
